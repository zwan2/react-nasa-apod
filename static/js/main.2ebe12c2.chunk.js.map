{"version":3,"sources":["components/ViewerTemplate/ViewerTemplate.js","components/SpaceNavigator/SpaceNavigator.js","components/Viewer/Viewer.js","lib/api.js","App.js","serviceWorker.js","index.js"],"names":["cx","classNames","bind","styles","ViewerTemplate","_ref","date","viewer","spaceNavigator","react_default","a","createElement","className","SpaceNavigator","onPrev","onNext","onClick","md","Viewer","mediaType","url","loading","dist","color","size","window","open","src","alt","title","frameBorder","gesture","allow","allowFullScreen","getAPOD","arguments","length","undefined","Axios","get","concat","App","state","maxDate","_callee","response","_response$data","retrievedDate","regenerator_default","wrap","_context","prev","next","_this","abrupt","setState","api","sent","data","media_type","t0","console","log","stop","handlePrev","prevDate","moment","subtract","format","handleNext","nextDate","add","this","_this$state","components_ViewerTemplate_ViewerTemplate","components_SpaceNavigator_SpaceNavigator","components_Viewer_Viewer","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ebe12c2.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './ViewerTemplate.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst ViewerTemplate = ({ date, viewer, spaceNavigator }) => {\r\n    return (\r\n        <div className={cx('viewer-template')}>\r\n            <header>\r\n                오늘의 우주 사진 {date}\r\n            </header>\r\n\r\n            <div className={cx('viewer-wrapper')}>\r\n                {viewer}\r\n                <div className={cx('space-navigator-wrapper')}>\r\n                    {spaceNavigator}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewerTemplate;","import React from 'react';\r\nimport styles from './SpaceNavigator.scss';\r\nimport classNames from 'classnames/bind';\r\n//import LeftIcon from 'react-icons/md/chevron-left';\r\n//import RightIcon from 'react-icons/md/chevron-right';\r\n\r\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst SpaceNavigator = ({ onPrev, onNext }) => {\r\n    return (\r\n        <div className={cx('space-navigator')}>\r\n            <div className={cx('left', 'end')}>\r\n                <div className={cx('circle')} onClick={onPrev}>\r\n                    <MdChevronLeft />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={cx('right', 'end')}>\r\n                <div className={cx('circle')} onClick={onNext}>\r\n                    <MdChevronRight />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default SpaceNavigator;","import React from 'react';\r\nimport styles from './Viewer.scss';\r\nimport classNames from 'classnames/bind';\r\nimport {\r\n    ChasingDots\r\n} from 'better-react-spinkit'\r\n\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst Viewer = ({ mediaType, url, loading }) => {\r\n    if (loading) {\r\n        // 로딩중일때 로더 보여주기\r\n        return <div className={cx('viewer')}>\r\n            <ChasingDots color=\"white\" size={60} />\r\n        </div>\r\n    }\r\n    if (!url) return null;\r\n\r\n    return (\r\n        <div className={cx('viewer')}>\r\n\r\n            {\r\n                mediaType === 'image' ? (\r\n                    <img onClick={() => window.open(url)} src={url} alt=\"space\" />\r\n                ) : (\r\n                        <iframe title=\"space-video\" src={url} frameBorder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowFullScreen></iframe>\r\n                    )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Viewer;","import Axios from \"axios\";\r\n\r\nexport function getAPOD(date = '') {\r\n    return Axios.get(`https://api.nasa.gov/planetary/apod?api_key=ZElStJtBJydqdJbP7v9z2PcfNSUXew9PAD8t75hY&date=${date}`)\r\n}","import React, { Component } from 'react';\nimport ViewerTemplate from './components/ViewerTemplate';\nimport SpaceNavigator from './components/SpaceNavigator';\nimport Viewer from './components/Viewer';\nimport moment from 'moment';\nimport * as api from './lib/api';\n\nclass App extends Component {\n  state = {\n    loading: false,\n    maxDate: null,\n    date: null,\n    url: null,\n    mediaType: null\n  }\n\n  //data handling\n  getAPOD = async (date) => {\n    if (this.state.loading) return; // 이미 요청중이라면 무시\n\n    // 로딩 상태 시작\n    this.setState({\n      loading: true\n    });\n\n\n    try {\n      const response = await api.getAPOD(date);\n      const { date: retrievedDate, url, media_type: mediaType } = response.data;\n\n\n      if (!this.state.maxDate) {\n        // 만약에 maxDate 가 없으면 지금 받은 date 로 지정\n        this.setState({\n          maxDate: retrievedDate\n        })\n      }\n\n      this.setState({\n        date: retrievedDate,\n        mediaType: mediaType,\n        url: url\n      })\n\n    } catch (e) {\n      console.log(e);\n    };\n\n    // 로딩 상태 종료\n    this.setState({\n      loading: false\n    });\n  }\n\n  //state로부터 날짜를 받아서,\n  //moment로 하루 전 날짜를 계산해서\n  //getAPOD(prevdate)\n  handlePrev = () => {\n    const { date } = this.state;\n    const prevDate = moment(date).subtract(1, 'day').format('YYYY-MM-DD');\n    console.log(prevDate);\n\n    this.getAPOD(prevDate);\n  }\n\n  handleNext = () => {\n    const { date } = this.state;\n    const nextDate = moment(date).add(1, 'day').format('YYYY-MM-DD');\n    console.log(nextDate);\n    this.getAPOD(nextDate);\n  }\n\n  componentDidMount() {\n    this.getAPOD();\n  }\n\n  render() {\n    const { date, url, mediaType, loading } = this.state;\n    const { handlePrev, handleNext } = this;\n    return (\n\n      <ViewerTemplate\n        date={date}\n        spaceNavigator={<SpaceNavigator onPrev={handlePrev} onNext={handleNext} />}\n        viewer={(\n          <Viewer\n            url={url}\n            mediaType={mediaType}\n            loading={loading}\n          />\n        )}\n      />\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport'./styles/base.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}